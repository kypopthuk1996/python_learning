# -*- coding: utf-8 -*-
#В этой конструкции только if является обязательным, elif и else опциональны:

#Проверка if всегда идет первой.
#После оператора if должно быть какое-то условие: если это условие выполняется (возвращает True),
#то действия в блоке if выполняются.
#С помощью elif можно сделать несколько разветвлений, то есть, проверять входящие данные на разные условия.
#Блок elif это тот же if, но только следующая проверка. Грубо говоря, это «а если …»
#Блоков elif может быть много.
#Блок else выполняется в том случае, если ни одно из условий if или elif не было истинным.
a = 9

if a == 10:
    print('a равно 10')
elif a < 10:
    print('a меньше 10')
else:
    print('a больше 10')

#Условие if и elif выполняются только если они отдают True
#Проверка списка на пустоту:
list_to_test = [1, 2, 3]

if list_to_test:
    print("В списке есть объекты")

#Оператор in
#Оператор in позволяет выполнять проверку на наличие элемента в последовательности
#(например, элемента в списке или подстроки в строке):
print('Fast' in 'FastEthernet')

vlan = [10, 20, 30, 40]
print(50 in vlan)

#При использовании со словарями условие in выполняет проверку по ключам словаря:
r1 = {
'IOS': '15.4',
'IP': '10.255.0.1',
'hostname': 'london_r1',
'location': '21 New Globe Walk',
'model': '4451',
'vendor': 'Cisco'
}

print('IOS' in r1)
print('4451' in r1)

#Операторы and, or , not
#Оператор and
#В Python оператор and возвращает не булево значение, а значение одного из операндов.
#Если оба операнда являются истиной, результатом выражения будет последнее значение:
print('string1' and 'string2')
#Если один из операторов является ложью, результатом выражения будет первое ложное значение:
print('' and [] and 'string1')

#Оператор or
#Оператор or, как и оператор and, возвращает значение одного из операндов.
#При оценке операндов возвращается первый истинный операнд:
print('' or [] or 'string1')
#Если все значения являются ложными, возвращается последнее значение:
print('' or [] or {})
